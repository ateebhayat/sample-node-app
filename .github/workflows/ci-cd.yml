name: CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  # CI Job - Builds the Docker image and pushes it to Docker Hub
  ci:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (Optional if you're using Buildx)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 4: Build and push Docker image
      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-sample-app:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-sample-app:latest

  # CD Job - Deploys the Docker image to EC2
  cd:
    runs-on: ubuntu-latest
    needs: ci # This ensures that the CD job only runs if the CI job succeeds

    steps:
      # Step 1: Set up SSH to access EC2
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Step 2: Deploy Docker image on EC2
      - name: Deploy to EC2
        run: |
          ssh -v -o StrictHostKeyChecking=no ubuntu@${{secrets.EC2_HOST}} << 'EOF'
            # Stop and remove the current container (if running)
            docker stop sample-node || true
            docker rm sample-node || true

            # Pull the latest Docker image from Docker Hub
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-sample-app:latest

            # Run the Docker container
            docker run -d --name sample-node -p 80:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-sample-app:latest
          EOF
